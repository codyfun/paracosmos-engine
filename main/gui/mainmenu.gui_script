function init(self)
    gooey.acquire_input()

    self.can_quit = (sys.get_sys_info().system_name ~= "HTML5")
    if self.can_quit then
        gui.set_alpha(gui.get_node("quitbutton"), 1)
    end

    function self.pressed_newgame (button)
        msg.post("/sound", "play", {id = "click"})
        if self.can_load and not self.showing_newgamewarning then
            gui.set_color(gui.get_node("newgamebutton_text"), vmath.vector4(.6,0,0,1))
            gui.set_alpha(gui.get_node("newgamewarning"), 1)
            self.showing_newgamewarning = true
        else
            msg.post("/main", "new_game")
        end
    end

    function self.pressed_loadgame (button)
        msg.post("/sound", "play", {id = "click"})
        msg.post("/main", "load_game")
    end

    function self.pressed_quit (button)
        msg.post("/sound", "play", {id = "click"})
        sys.exit(0)
    end

    function self.update_button (button)
        if button.over_now then
            gui.set_color(button.node, vmath.vector4(.9,1,.8,1))
        end
        if button.out_now then
            gui.set_color(button.node, vmath.vector4(1,1,1,1))
        end
    end
end

function on_input(self, action_id, action)
    gooey.button("newgamebutton", action_id, action, self.pressed_newgame, self.update_button)
    if self.can_load then
        gooey.button("loadgamebutton", action_id, action, self.pressed_loadgame, self.update_button)
    end
    if self.can_quit then
        gooey.button("quitbutton", action_id, action, self.pressed_quit, self.update_button)
    end
    gooey.button("optionsbutton", action_id, action, Engine.pressed_options_dropdown_button, Engine.update_options_dropdown_button)
end

function on_message(self, message_id, message)
    if message_id == hash "can_load" then
        self.can_load = true
        gui.set_alpha(gui.get_node("loadgamebutton"), 1)
    end
end
