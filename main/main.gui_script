local gooey = require "gooey.gooey"

function init(self)
	msg.post(".", "acquire_input_focus")

	self.skill_list = {}
	self.skill_list_size = 0
	self.team_1_list = {}
	self.team_2_list = {}
	self.team_1_size = 0
	self.team_2_size = 0
	self.log = gui.get_node("log")
	self.logtext = ""

	self.AddSkillbutton = function (self, skill)
		local new_node = gui.clone_tree(gui.get_node("skilltemplate/button"))
		local new_id = "skillbutton" .. self.skill_list_size
		gui.set_id(new_node[hash"skilltemplate/bg"], new_id)
		local new_entry = {
			button = new_node[hash"skilltemplate/button"],
			text = new_node[hash"skilltemplate/text"],
			skill = skill,
		}
		self.skill_list[hash(new_id)] = new_entry
		self.skill_list_size = self.skill_list_size + 1
		local i = 0
		for k,entry in pairs(self.skill_list) do
			gui.set_position(entry.button, vmath.vector3(600 - self.skill_list_size * 50 + i * 100,100,0))
			i = i + 1
		end
		gui.set_text(new_entry.text, skill.name)
		--pprint(resource.get_text_metrics(gui.get_font_resource(gui.get_font(new_node[hash"skilltemplate/text"])), "Attack", {line_break = true}))
	end

	self.AddChar = function (self, char, team2)
		local new_node = gui.clone_tree(gui.get_node("chartemplate/bg"))
		local new_id = "charinfo" .. (team2 and ("B" .. self.team_2_size) or self.team_1_size)
		gui.set_id(new_node[hash"chartemplate/name"], new_id)
		local new_entry = {
			node = new_node,
			group = new_node[hash"chartemplate/bg"],
			char = char,
			nametext = new_node[hash"chartemplate/name"],
			hptext = new_node[hash"chartemplate/hptext"],
			team = team2 and 2 or 1,
		}
		if team2 then
			self.team_2_list[hash(new_id)] = new_entry
			self.team_2_size = self.team_2_size + 1
			local i = 0
			for k,entry in pairs(self.team_2_list) do
				gui.set_position(entry.group, vmath.vector3(700,400 - self.team_2_size * 50 + i * 100,0))
				i = i + 1
			end
		else
			self.team_1_list[hash(new_id)] = new_entry
			self.team_1_size = self.team_1_size + 1
			local i = 0
			for k,entry in pairs(self.team_1_list) do
				gui.set_position(entry.group, vmath.vector3(400,400 - self.team_1_size * 50 + i * 100,0))
				i = i + 1
			end
		end
		gui.set_text(new_entry.nametext, char.name)
	end

	self.update_skillbutton = function (button)
		if self.skill_selected ~= button.node then
			if button.over_now then
				gui.set_color(button.node, vmath.vector4(1,1,.8,1))
			elseif button.out_now then
				gui.set_color(button.node, vmath.vector4(1,1,1,1))
			end
		end
	end

	self.press_skillbutton = function (button)
		if self.skill_selected then
			if self.skill_selected ~= button.node then --deselect previous skill when clicking new one
				gui.set_color(self.skill_selected, vmath.vector4(1,1,1,1))
			else --click on selected skill to deslect
				gui.set_color(self.skill_selected, vmath.vector4(1,1,.8,1))
				self.skill_selected = nil
				msg.post("/level", "set_active_skill", {skill = nil})
				return --do not fallthrough to selection
			end
		end
		self.skill_selected = button.node
		gui.set_color(self.skill_selected, vmath.vector4(1,1,.6,1))
		msg.post("/level", "set_active_skill", {skill = self.skill_list[gui.get_id(button.node)].skill})
	end

	self.update_char = function (button)
		
	end

	self.press_char = function (button)
		
	end
	
	--TEMP
	local gamelogic = require"main/gamelogic"
	self:AddSkillbutton({name = "Attack", desc = "Damage one enemy.", target = gamelogic.TARGET_FOE, range = 64,})
	self:AddSkillbutton({name = "Defend", desc = "Raise your defense.", target = gamelogic.TARGET_SELF,})
	self:AddChar({name = "Hero"})
	self:AddChar({name = "Enemy"}, true)
	self:AddChar({name = "Enemy"}, true)
	--TEMP
end

function on_input(self, action_id, action)
	for id,node in pairs(self.skill_list) do
		gooey.button(id, action_id, action, self.press_skillbutton, self.update_skillbutton)
	end
	for id,node in pairs(self.team_1_list) do
		gooey.button(id, action_id, action, self.press_char, self.update_char)
	end
	for id,node in pairs(self.team_2_list) do
		gooey.button(id, action_id, action, self.press_char, self.update_char)
	end
end

function on_message(self, message_id, message, sender)
	
end

